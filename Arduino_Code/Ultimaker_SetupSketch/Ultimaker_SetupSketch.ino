z  //Limit Switches//
  #pragma region stuff
  //Limit Switches//
  const int LS_X_left = 22;
  const int LS_X_right = 24;
  const int LS_Y_front = 26;
  const int LS_Y_back = 28;
  const int LS_Z_top = 30;
  const int LS_Z_bottom = 32;

  //Axes//
  const int X_dir = 23;
  const int X_step = 25;
  const int X_enable = 27;

  const int Y_enable = 29;
  const int Y_step = 31;
  const int Y_dir = 33;

  const int Z_enable = 35;
  const int Z_step = 37;
  const int Z_dir = 39;

  //Printer Properties//
  float X_length;
  float Y_length;

  float X_position;
  float Y_position;
  float Z_position;
  /*
  Unused/Optional Axes (Not Needed)
  const int E_enable = 41;
  const int E_step = 43;
  const int E_dir = 45;
  const int A_dir = 47;
  const int A_enable = 48;
  const int A_step = 49;

  Heater Pins (Not Needed)
  const int heater1 = 2;
  const int heater2 = 3;
  const int heater3 = 4;
  const int heater4 = 7;

  {78.7402,78.7402,200.0*8/3,760*1.1} // default steps per unit for Ultimaker
  */

  void setup() {
    // Initialize serial communication for debugging
    Serial.begin(9600);

    // Set stepper and limit switch pins
    pinMode(X_dir, OUTPUT);
    pinMode(X_step, OUTPUT);
    pinMode(X_enable, OUTPUT);

    pinMode(Y_dir, OUTPUT);
    pinMode(Y_step, OUTPUT);
    pinMode(Y_enable, OUTPUT);

    pinMode(Z_dir, OUTPUT);
    pinMode(Z_step, OUTPUT);
    pinMode(Z_enable, OUTPUT);

    pinMode(LS_X_left, INPUT_PULLUP);
    pinMode(LS_X_right, INPUT_PULLUP);
    pinMode(LS_Y_back, INPUT_PULLUP);
    pinMode(LS_Y_front, INPUT_PULLUP);

    // Enable the stepper motors
    digitalWrite(X_enable, LOW); // Enable X-axis
    digitalWrite(Y_enable, LOW); // Enable Y-axis
    digitalWrite(Z_enable, HIGH); // Disable Z till adjusting
  }

#pragma endregion stuff

float path[][2] = {{162.94249725341797,97.33699798583984},{161.68606185913086,95.17936325073242},{160.27330017089844,93.11957550048828},{158.77776336669922,91.1188850402832},{157.22605895996094,89.16136169433594},{155.63110733032227,87.2388973236084},{153.9995231628418,85.3474006652832},{152.334716796875,83.48507499694824},{150.63786697387695,81.65190887451172},{148.90818405151367,79.84968757629395},{147.1428985595703,78.08235359191895},{145.33627700805664,76.3573112487793},{143.47760772705078,74.68859100341797},{141.5453643798828,73.10597038269043},{139.48535919189453,71.6961612701416},{138.27982711791992,70.1321029663086},{138.90673446655273,67.71439266204834},{139.39658737182617,65.26524257659912},{139.7462387084961,62.79218578338623},{139.95391464233398,60.303184509277344},{140.01927185058594,57.806392669677734},{139.94089126586914,55.30999279022217},{139.71004104614258,52.82311153411865},{139.31649017333984,50.35679817199707},{138.75108337402344,47.92420196533203},{138.00622177124023,45.540489196777344},{137.0761833190918,43.22281742095947},{135.9574203491211,40.99019813537598},{134.648193359375,38.863765716552734},{133.14719772338867,36.86824941635132},{131.4482078552246,35.038814067840576},{129.55577850341797,34.459691524505615},{127.83568572998047,36.269081115722656},{126.31279754638672,38.2480092048645},{124.97380447387695,40.35589790344238},{123.81621170043945,42.56868886947632},{122.83904647827148,44.86693286895752},{122.04059219360352,47.2332649230957},{121.41741561889648,49.6517333984375},{120.96438980102539,52.107815742492676},{120.67455673217773,54.58850860595703},{120.53969955444336,57.08247947692871},{120.55110931396484,59.580095291137695},{120.70584487915039,62.07293891906738},{121.00302505493164,64.55285358428955},{121.44086456298828,67.01183700561523},{122.0161247253418,69.44236183166504},{120.51198196411133,70.58897972106934},{118.92973327636719,70.03037071228027},{118.30084609985352,67.61315250396729},{117.5380630493164,65.23482704162598},{116.64210510253906,62.90339374542236},{115.61492919921875,60.626729011535645},{114.45944213867188,58.412437438964844},{113.17969512939453,56.267539978027344},{111.7779369354248,54.20037078857422},{110.25138664245605,52.2236270904541},{108.59752655029297,50.35219478607178},{106.8157958984375,48.60216426849365},{104.90800285339355,46.99057865142822},{102.87875938415527,45.53500747680664},{100.73533248901367,44.25363254547119},{98.48785018920898,43.16528511047363},{96.14839172363281,42.29238271713257},{93.7303524017334,41.671067237854004},{92.03089332580566,42.521729469299316},{91.56258392333984,44.974069595336914},{91.34489440917969,47.46164894104004},{91.34920310974121,49.95888423919678},{91.56150817871094,52.447147369384766},{91.97089767456055,54.910719871520996},{92.56659126281738,57.33605480194092},{93.33724212646484,59.711636543273926},{94.27063941955566,62.02818965911865},{95.35398292541504,64.2785587310791},{96.57438087463379,66.4577169418335},{97.91946220397949,68.56224822998047},{99.38247489929199,70.58658790588379},{100.95856094360352,72.5241641998291},{102.64222717285156,74.36900901794434},{104.42720222473145,76.11608695983887},{106.30672264099121,77.7609920501709},{108.27391624450684,79.30003929138184},{110.18251609802246,80.7752685546875},{109.4484748840332,83.16177940368652},{107.96814727783203,83.1450138092041},{105.88461303710938,81.76756858825684},{103.7312183380127,80.50202941894531},{101.51499557495117,79.35010147094727},{99.2425651550293,78.31342124938965},{96.92055892944336,77.39315605163574},{94.55536270141602,76.59033012390137},{92.15326499938965,75.90568161010742},{89.72045707702637,75.33981704711914},{87.2630443572998,74.8928108215332},{84.78694343566895,74.56463432312012},{82.29802513122559,74.35490417480469},{79.80193138122559,74.26287078857422},{77.30429267883301,74.28753852844238},{74.81052207946777,74.42900466918945},{72.32628440856934,74.68834495544434},{69.85728454589844,75.06623458862305},{67.40937042236328,75.56278228759766},{64.98865032196045,76.17827415466309},{62.60117244720459,76.91217231750488},{60.253228187561035,77.76409339904785},{57.951189041137695,78.7332534790039},{55.7015323638916,79.81849098205566},{53.51097583770752,81.01846694946289},{51.38635730743408,82.33169364929199},{49.33477783203125,83.7562427520752},{47.36338424682617,85.28987693786621},{45.47977542877197,86.93013572692871},{43.69163751602173,88.67392349243164},{42.00698709487915,90.51788139343262},{40.433780670166016,92.4577522277832},{38.980379581451416,94.48891830444336},{37.65496063232422,96.6058177947998},{36.46552753448486,98.8019847869873},{34.818907260894775,99.33571434020996},{32.37651348114014,98.90472412109375},{29.97833752632141,99.52875900268555},{28.039724826812744,101.07771110534668},{26.83091402053833,103.24630928039551},{26.538729906082153,105.71044540405273},{27.224788904190063,108.09584045410156},{28.757140636444092,110.04920959472656},{30.924237489700317,111.2550106048584},{32.45937728881836,112.27275657653809},{31.973350286483765,114.72100830078125},{31.740666151046753,117.20804977416992},{31.565125226974487,119.6998405456543},{31.438732385635376,122.19459533691406},{31.36093044281006,124.69132995605469},{31.334126949310303,127.18914031982422},{31.361616373062134,129.68691635131836},{31.449382543563843,132.18333053588867},{31.60443925857544,134.6764144897461},{31.83624505996704,137.16350173950195},{32.15725612640381,139.64062118530273},{32.58402633666992,142.1016387939453},{33.13894748687744,144.53689575195312},{33.852641105651855,146.9301528930664},{34.76753902435303,149.25349807739258},{35.94149112701416,151.45635986328125},{37.44602012634277,153.44596099853516},{39.33975410461426,155.0652198791504},{41.595975399017334,156.1169776916504},{44.057251930236816,156.49715042114258},{46.555253982543945,156.5},{49.05324745178223,156.5},{51.5512638092041,156.5},{54.04925727844238,156.5},{56.547250747680664,156.5},{59.04526710510254,156.5},{61.54323768615723,156.5},{64.0412540435791,156.5},{66.53922462463379,156.5},{69.03724098205566,156.5},{71.53525733947754,156.5},{74.03322792053223,156.5},{76.5312442779541,156.5},{79.02921485900879,156.5},{81.52723121643066,156.5},{84.02524757385254,156.5},{86.52321815490723,156.5},{89.0212345123291,156.5},{90.3538990020752,155.43520736694336},{89.45399284362793,153.12256240844727},{87.7937183380127,151.26951217651367},{85.71738243103027,149.8884391784668},{83.43934440612793,148.86802673339844},{81.05921936035156,148.1129913330078},{78.62365913391113,147.56048202514648},{76.15658187866211,147.1711654663086},{73.67145729064941,146.92110061645508},{71.17674827575684,146.79747009277344},{70.0452651977539,146.51351928710938},{72.3011360168457,145.44220352172852},{74.46359443664551,144.19302368164062},{76.51870155334473,142.77417373657227},{78.45342826843262,141.19511795043945},{80.2552719116211,139.46598434448242},{81.9123764038086,137.59765625},{83.41366386413574,135.60198974609375},{84.74869728088379,133.49148178100586},{85.90792655944824,131.27955627441406},{86.88307189941406,128.98051834106445},{87.66711235046387,126.6094856262207},{88.2547378540039,124.1822509765625},{88.64286994934082,121.71535110473633},{88.83051872253418,119.22507095336914},{88.81919479370117,116.72776412963867},{88.60866928100586,114.23932647705078},{88.1980152130127,111.77598571777344},{87.58852577209473,109.35420417785645},{86.7836856842041,106.99015808105469},{85.78890800476074,104.69956016540527},{84.61144256591797,102.49727058410645},{83.25938034057617,100.3975658416748},{81.7424545288086,98.41378974914551},{80.07084465026855,96.55846214294434},{78.25548553466797,94.84351921081543},{76.3082389831543,93.2798900604248},{74.24147033691406,91.8780517578125},{72.06839752197266,90.6475772857666},{69.80282211303711,89.59696960449219},{67.45950698852539,88.73361015319824},{65.0538158416748,88.06335830688477},{62.60171890258789,87.59031105041504},{60.46353054046631,87.31620216369629},{62.9598388671875,87.2433090209961},{65.45412158966064,87.36528587341309},{67.93063163757324,87.6871395111084},{70.37297821044922,88.20846366882324},{72.76474189758301,88.92658615112305},{75.09023857116699,89.83695793151855},{77.33414459228516,90.93302726745605},{79.48201751708984,92.20707511901855},{81.52022743225098,93.6501522064209},{83.43583106994629,95.2523365020752},{85.21673202514648,97.00304794311523},{86.85149765014648,98.89093971252441},{88.32937049865723,100.9040584564209},{89.64033126831055,103.02961540222168},{90.77521324157715,105.25412368774414},{91.72600555419922,107.56334686279297},{92.48599624633789,109.94220733642578},{93.05012130737305,112.37496376037598},{93.41526222229004,114.84544563293457},{93.5805835723877,117.33726501464844},{93.55153274536133,119.8345718383789},{93.3374195098877,122.32272338867188},{92.92967796325684,124.7865219116211},{92.32093811035156,127.20851516723633},{91.50675964355469,129.5692253112793},{90.48670196533203,131.8485221862793},{89.26455879211426,134.02609252929688},{87.84859848022461,136.0829849243164},{86.25110054016113,138.0022735595703},{84.48742294311523,139.77008819580078},{82.57540130615234,141.37641525268555},{80.53378105163574,142.81455993652344},{78.38165092468262,144.0813865661621},{76.13725280761719,145.1767578125},{76.24949645996094,145.66393280029297},{78.74404525756836,145.78838729858398},{81.22621154785156,146.0652198791504},{83.68432235717773,146.5068817138672},{86.1006908416748,147.13723373413086},{88.44561386108398,147.99465942382812},{90.66536712646484,149.13578414916992},{92.6584358215332,150.6347427368164},{94.24509620666504,152.5541114807129},{95.64002799987793,154.01586532592773},{97.98521995544434,153.1565284729004},{100.28269577026367,152.17662811279297},{102.5260181427002,151.0782814025879},{104.70884704589844,149.86436080932617},{106.82497978210449,148.5375099182129},{108.86784172058105,147.1004867553711},{110.83105278015137,145.55635833740234},{112.70784950256348,143.90826034545898},{114.4912109375,142.1595802307129},{116.17365264892578,141.2344741821289},{117.815673828125,143.11691284179688},{119.45772933959961,144.99939727783203},{121.09978485107422,146.8818817138672},{122.74181747436523,148.76433181762695},{124.38387298583984,150.6468162536621},{126.02589416503906,152.52926635742188},{127.66794967651367,154.41173934936523},{129.31000518798828,156.2942237854004},{131.71440887451172,156.5},{134.2124252319336,156.5},{136.71039581298828,156.5},{139.20841217041016,156.5},{141.70642852783203,156.5},{144.20439910888672,156.5},{146.7024154663086,156.5},{147.59984970092773,154.72341918945312},{147.20021057128906,152.27198028564453},{145.85007095336914,150.19373321533203},{143.80681991577148,148.77615356445312},{141.45949935913086,147.9347152709961},{139.00213241577148,147.4971046447754},{136.50946044921875,147.3527488708496},{134.5261993408203,146.79912948608398},{134.07111358642578,144.34296417236328},{133.61601638793945,141.8867530822754},{133.16093063354492,139.4305877685547},{134.71868896484375,137.79348754882812},{136.62344360351562,136.1789779663086},{138.35084915161133,134.37616729736328},{139.87373733520508,132.39764404296875},{141.17177200317383,130.26487731933594},{142.2331428527832,128.00484085083008},{143.05556106567383,125.64725494384766},{143.64458847045898,123.22066116333008},{144.01029586791992,120.75039672851562},{144.16407012939453,118.25789642333984},{144.11450576782227,115.76105308532715},{143.85993194580078,113.27682113647461},{144.6706314086914,111.84683609008789},{147.15658569335938,111.61202621459961},{149.60852813720703,111.13952827453613},{152.0062713623047,110.44207954406738},{154.32928466796875,109.52608299255371},{156.55318069458008,108.39062881469727},{158.6430892944336,107.02508544921875},{160.5422592163086,105.40555763244629},{162.1444206237793,103.49433708190918},{163.23301696777344,101.25654220581055},{163.41608810424805,98.78688430786133},{144.2960090637207,95.31379127502441},{142.5315818786621,93.65225219726562},{142.61569595336914,91.23000717163086},{144.49107360839844,89.6950454711914},{146.8814697265625,90.09397506713867},{148.1581039428711,92.15356826782227},{147.45299911499023,94.47197532653809}};

int mm_To_steps(float mm){
  return mm * 78.7402;
}

float steps_To_mm(int steps){
  return steps / 78.7402;
}

void homeToBackLeft() {
  // Move X-axis to the left until it hits the left limit switch
  while (digitalRead(LS_X_left) == HIGH || digitalRead(LS_Y_back) == HIGH) {
    if (digitalRead(LS_X_left) == HIGH) {
      stepAxis(X_step, X_dir, HIGH);  // HIGH to back
      if (digitalRead(LS_X_left) == LOW) {
        Serial.println("X-axis homed!");
        X_position = 0.0;
        delay(10);
      }
    }
    if (digitalRead(LS_Y_back) == HIGH) {
      stepAxis(Y_step, Y_dir, HIGH);
      if (digitalRead(LS_Y_back) == LOW) {
        Serial.println("Y-axis homed!");
        Y_position = 0.0;
        delay(10);
      }
    }
  }

  // After homing, reset position
  X_position = 0;
  Y_position = 0;
}

void stepAxis(int stepPin, int dirPin, boolean dir) {
  static long stepCounter = 0;  // Counter to control print frequency

  digitalWrite(dirPin, dir);
  digitalWrite(stepPin, HIGH);

  // Update position based on the direction of movement
  switch (dirPin) {
    case X_dir:
      if (dir) 
        X_position -= steps_To_mm(1);
      else 
        X_position += steps_To_mm(1);
      break;

    case Y_dir:
      if (dir) 
        Y_position -= steps_To_mm(1);
      else 
        Y_position += steps_To_mm(1);
      break;

    default:
      break;
  }

  delayMicroseconds(500);
  digitalWrite(stepPin, LOW);
  delayMicroseconds(500);

  // Increment the step counter
  stepCounter++;

  // Print the position every 100 steps to reduce serial output
  if (stepCounter % 100 == 0) {
    Serial.print("X: ");
    Serial.print(X_position);
    Serial.print(" mm, Y: ");
    Serial.print(Y_position);
    Serial.println(" mm");
  }
}

void Calibrate() {
    homeToBackLeft(); // Home to the back-left corner
    delay(100);

    long xSteps = 0;
    long ySteps = 0;

    // Move both X-axis and Y-axis until their respective limit switches are hit
    while (digitalRead(LS_X_right) == HIGH || digitalRead(LS_Y_front) == HIGH) {
        // Move X-axis to the right
        if (digitalRead(LS_X_right) == HIGH) {
            stepAxis(X_step, X_dir, LOW); // LOW to move towards the right
            xSteps++;
        }
        // Move Y-axis to the front
        if (digitalRead(LS_Y_front) == HIGH) {
            stepAxis(Y_step, Y_dir, LOW); // LOW to move towards the front
            ySteps++;
        }
    }
    delay(100);

    // Convert steps to millimeters
    X_length = steps_To_mm(xSteps);
    Y_length = steps_To_mm(ySteps);

    // Print results
    Serial.print("X-axis length: ");
    Serial.print(X_length);
    Serial.println(" mm");

    Serial.print("Y-axis length: ");
    Serial.print(Y_length);
    Serial.println(" mm");
    move(X_length/2, Y_length/2);


    Serial.println("Adjust the bed so the pen? touches the bed, type 'Done!' when ready");
    while(getUserInput() != "Done!");
    digitalWrite(Z_enable, LOW);
    Z_position = 0;
    moveZ(-10);
}

String getUserInput() {
  while (Serial.available() == 0) {
  }
  
  String userInput = Serial.readString();
  return userInput;
}

void moveZ(float z) {
    long targetZSteps = mm_To_steps(z);
    long deltaZSteps = mm_To_steps(Z_position) - targetZSteps;

    boolean zDirection = deltaZSteps > 0 ? LOW : HIGH;
    long absDeltaZSteps = abs(deltaZSteps);

    // Update Z_position to target position
    Z_position = z;

    while (absDeltaZSteps > 0) {
        stepAxis(Z_step, Z_dir, zDirection);
        absDeltaZSteps--;
    }
}

void move(float x, float y) {
    long targetXSteps = mm_To_steps(x);
    long targetYSteps = mm_To_steps(y);

    long deltaXSteps = mm_To_steps(X_position) - targetXSteps;
    long deltaYSteps = mm_To_steps(Y_position) - targetYSteps;

    boolean xDirection = deltaXSteps > 0 ?  HIGH : LOW;
    boolean yDirection = deltaYSteps > 0 ? HIGH : LOW;

    long absDeltaXSteps = abs(deltaXSteps);
    long absDeltaYSteps = abs(deltaYSteps);

    while (absDeltaXSteps > 0 || absDeltaYSteps > 0) {
        if (absDeltaXSteps > 0) {
            stepAxis(X_step, X_dir, xDirection);
            absDeltaXSteps--;
        }

        // Move Y-axis if needed
        if (absDeltaYSteps > 0) {
            stepAxis(Y_step, Y_dir, yDirection);
            absDeltaYSteps--;
        }
    }

    Serial.print("Moved to X: ");
    Serial.print(X_position);
    Serial.print(" mm, Y: ");
    Serial.print(Y_position);
    Serial.println(" mm");
}

void followPath() {
  int numPoints = sizeof(path) / sizeof(path[0]);  // Calculate the number of points in the array

  for (int i = 0; i < numPoints; i++) {
    float x = path[i][0];  // X coordinate
    float y = path[i][1];  // Y coordinate
    move(x, y);  // Call your existing move function with each point
    if (i == 0) moveZ(0);
  }
  moveZ(-10);
  getUserInput();
}

void loop() {
  Calibrate();
  while (1) {
    if (Serial.available() > 0) {
        // Read the incoming string
        String command = Serial.readStringUntil('\n');
        command.trim(); // Remove any leading or trailing whitespace

        // Debugging: print received command
        Serial.print("Received command: ");
        Serial.println(command);

        // Parse the command using String methods
        int commaIndex = command.indexOf(',');
        if (commaIndex > 0) {
            // Extract X and Y values
            String xStr = command.substring(0, commaIndex);
            String yStr = command.substring(commaIndex + 1);
            
            float x = xStr.toFloat();
            float y = yStr.toFloat();

            // Debugging: print extracted values
            Serial.print("Parsed X: ");
            Serial.println(x);
            Serial.print("Parsed Y: ");
            Serial.println(y);

            // Move to the specified coordinates
            move(x, y);
        } else {
            Serial.println("Invalid command format. Use: X,Y");
        }
    }
    
  }
  followPath();
}
